// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  firstName     String?  @map("first_name")
  lastName      String?  @map("last_name")
  avatarUrl     String?  @map("avatar_url")
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  subscriptions   Subscription[]
  qrCodes         QrCode[]
  usageTracking   UsageTracking[]
  emailVerifyToken EmailVerifyToken[]
  passwordResetToken PasswordResetToken[]

  @@map("users")
}

model EmailVerifyToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verify_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Subscription {
  id                    String    @id @default(cuid())
  userId                String    @map("user_id")
  stripeSubscriptionId  String?   @map("stripe_subscription_id")
  stripeCustomerId      String?   @map("stripe_customer_id")
  planType              PlanType  @map("plan_type")
  status                SubscriptionStatus
  trialStart            DateTime? @map("trial_start")
  trialEnd              DateTime? @map("trial_end")
  currentPeriodStart    DateTime? @map("current_period_start")
  currentPeriodEnd      DateTime? @map("current_period_end")
  cancelAtPeriodEnd     Boolean   @default(false) @map("cancel_at_period_end")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model QrCode {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  title            String?
  content          String
  qrType           QrType    @map("qr_type")
  industryTemplate String?   @map("industry_template")
  styleConfig      Json?     @map("style_config")
  logoUrl          String?   @map("logo_url")
  fileUrls         Json?     @map("file_urls")
  scanCount        Int       @default(0) @map("scan_count")
  isDynamic        Boolean   @default(false) @map("is_dynamic")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  scans QrScan[]

  @@map("qr_codes")
}

model QrScan {
  id         String   @id @default(cuid())
  qrCodeId   String   @map("qr_code_id")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  country    String?
  city       String?
  deviceType String?  @map("device_type")
  scannedAt  DateTime @default(now()) @map("scanned_at")

  qrCode QrCode @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)

  @@map("qr_scans")
}

model UsageTracking {
  id         String     @id @default(cuid())
  userId     String     @map("user_id")
  actionType ActionType @map("action_type")
  count      Int        @default(1)
  date       DateTime   @default(now()) @db.Date
  createdAt  DateTime   @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, actionType, date])
  @@map("usage_tracking")
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  key       String   @unique
  isActive  Boolean  @default(true) @map("is_active")
  lastUsed  DateTime? @map("last_used")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("api_keys")
}

enum PlanType {
  TRIAL
  FREE
  PRO
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum QrType {
  URL
  TEXT
  EMAIL
  PHONE
  SMS
  WIFI
  VCARD
  LOCATION
  SOCIAL
  REVIEW
}

enum ActionType {
  QR_GENERATED
  QR_DOWNLOADED
  API_CALL
  QR_SCANNED
}